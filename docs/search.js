window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "pydyn_surv", "modulename": "pydyn_surv", "kind": "module", "doc": "<p><code>pydyn_surv</code> it's a simple library for creating a <strong>dyn</strong>amic <strong>surv</strong>ey using basic tools in python. This can be incorporated to a user inteface with the flexibility that Python offers.</p>\n\n<h2 id=\"submodules\">Submodules</h2>\n\n<p><code>pydyn_surv</code> it's made by the following submodules:</p>\n\n<ul>\n<li><strong>pydyn_surv.survey</strong>: This submodule contains the class survey, which is used to create survey instances.</li>\n<li><strong>pydyn_surv.item</strong>: This submodule contains the class item, which is used to create item instances.</li>\n<li><strong>pydyn_surv.ml</strong>: This submodule contains the class ml, which contains the machine learning algorithms used in the library.</li>\n<li><strong>pydyn_surv.funcs</strong>: This submodule contains default and custom functions for defining condition and probability.</li>\n<li><strong>pydyn_surv.other_classes</strong>: By now, this submodule only contains the class pydyn_surv_list, which is used in the library to create lists with custom methods.</li>\n</ul>\n"}, {"fullname": "pydyn_surv.funcs", "modulename": "pydyn_surv.funcs", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.funcs.PREDICTOR", "modulename": "pydyn_surv.funcs", "qualname": "PREDICTOR", "kind": "function", "doc": "<p><strong>Reg</strong>ression predictor. Returns the sign of a prediction given a weigth (w) and a feauture vector (x).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: sign value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_FALSE", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_FALSE", "kind": "function", "doc": "<p>Returns False. Useful for the 'condition' and 'probability' methods on <code>pydyn_surv.survey.survey</code> and <code>pydyn_surv.item.item</code> objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_TRUE", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_TRUE", "kind": "function", "doc": "<p>Returns True. Useful for the 'condition' and 'probability' methods on <code>pydyn_surv.survey.survey</code> and <code>pydyn_surv.item.item</code> objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.TRAIN_FUNCTION", "modulename": "pydyn_surv.funcs", "qualname": "TRAIN_FUNCTION", "kind": "function", "doc": "<p>Trains the item using the gradient descent method.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gradient_des</strong> (callable):\nThe gradient descent function to be used.</li>\n<li><strong>eta</strong> (float):\nThe learning rate.</li>\n<li><strong>iter_</strong> (int):\nThe number of iterations.</li>\n<li><strong>verbose</strong> (bool):\nIf True, prints the iteration number and the loss at each iteration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>trained_w</strong> (np.ndarray):\nThe trained weight vector.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_des</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">gradient_descent</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">eta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">iter_</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2000</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_LIKERT_ITEM_PROBABILITY", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_LIKERT_ITEM_PROBABILITY", "kind": "function", "doc": "<p>Returns the probability for an item to be launched based on the predicted label and the axis move only.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis_move</strong> (int):\nThe axis move.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>prob</strong> (float):\nThe probability for the item to be launched.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">axis_move</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_APPLY_TO_ITEM_AND_CATEGORY_HISTORY", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_APPLY_TO_ITEM_AND_CATEGORY_HISTORY", "kind": "function", "doc": "<p>Applies a function to the item history and the category history and returns a list for each one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (callable):\nThe function to be applied.</li>\n<li><strong>*args</strong> (list):\nThe arguments for the function.</li>\n<li><strong>**kargs</strong> (dict):\nThe keyword arguments for the function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>item_func</strong> (list):\nThe list of the function applied to the item history.</li>\n<li><strong>cat_func</strong> (list):\nThe list of the function applied to the category history.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_LIKERT_ITEM_PROBABILITY_WITH_STATISTICS", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_LIKERT_ITEM_PROBABILITY_WITH_STATISTICS", "kind": "function", "doc": "<p>Returns the probability for an item to be launched based on the predicted label, the axis move and the statistics of the item and category history.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>axis_move</strong> (int):\nThe axis move.</li>\n<li><strong>not_repeated_since</strong> (int):\nThe number of launches since the last launch of the item.</li>\n<li><strong>std_weight</strong> (float):\nThe weight of the standard deviation of the item history in the probability.</li>\n<li><strong>cat_std_weight</strong> (float):\nThe weight of the standard deviation of the category history in the probability.</li>\n<li><strong>launch_count_weight</strong> (float):\nThe weight of the launch count of the item in the probability.</li>\n<li><strong>cat_launch_count_weight</strong> (float):\nThe weight of the launch count of the category in the probability.</li>\n<li><strong>predicted_label_weight</strong> (float):\nThe weight of the predicted label in the probability.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>prob</strong> (float):\nThe probability for the item to be launched.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">axis_move</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">not_repeated_since</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">std_weight</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">cat_std_weight</span><span class=\"o\">=</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">launch_count_weight</span><span class=\"o\">=-</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">cat_launch_count_weight</span><span class=\"o\">=-</span><span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">predicted_label_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.FUNC_STD", "modulename": "pydyn_surv.funcs", "qualname": "FUNC_STD", "kind": "function", "doc": "<p>Returns the standard deviation of a list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>l</strong> (list):\nThe list to calculate the standard deviation.</li>\n<li><strong>return_when_empty</strong> (float):\nThe value to return when the list is empty.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>std</strong> (float):\nThe standard deviation of the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">return_when_empty</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.CONDITION_ORIGIN_LAUNCH_COUNT_OVER", "modulename": "pydyn_surv.funcs", "qualname": "CONDITION_ORIGIN_LAUNCH_COUNT_OVER", "kind": "function", "doc": "<p>Returns True if the launch count of the origin is over the count.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>count</strong> (int):\nThe count to compare.</li>\n<li><strong>all_origins</strong> (bool):\nIf True, all the origins must have a launch count over the count.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the launch count of the origin is over the count.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">all_origins</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.funcs.CONDITION_ORIGIN_LAUNCH_COUNT_BELOW", "modulename": "pydyn_surv.funcs", "qualname": "CONDITION_ORIGIN_LAUNCH_COUNT_BELOW", "kind": "function", "doc": "<p>Returns True if the launch count of the origin is below the count.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>count</strong> (int):\nThe count to compare.</li>\n<li><strong>all_origins</strong> (bool):\nIf True, all the origins must have a launch count below the count.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>bool</strong>: True if the launch count of the origin is below the count.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">all_origins</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item", "modulename": "pydyn_surv.item", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.item.DEFAULT_PARAMETERS_DICT", "modulename": "pydyn_surv.item", "qualname": "DEFAULT_PARAMETERS_DICT", "kind": "variable", "doc": "<p>Default parameters for the item class initialization. The parameters are:</p>\n\n<ul>\n<li>question: The question text. Default: ''.</li>\n<li>answers: The answers text in a list. Default: [].</li>\n<li>answers_values: The values for each answer. Default: [-2,-1,0,1,2].</li>\n<li>category_vector: The category vector for the item. Default: [].</li>\n<li>answer_range: The range of the answer values. Default: (-2,2).</li>\n<li>expert_extra: The expert extra value for the item. Default: 0.</li>\n<li>id: The id for the item. Default: None.</li>\n<li>origin_survey: The origin survey for the item. Default: None.</li>\n</ul>\n", "default_value": "{&#x27;question&#x27;: &#x27;&#x27;, &#x27;answers&#x27;: [], &#x27;answers_values&#x27;: [-2, -1, 0, 1, 2], &#x27;category_vector&#x27;: [], &#x27;answer_range&#x27;: (-2, 2), &#x27;expert_extra&#x27;: 0, &#x27;id&#x27;: None, &#x27;origin_survey&#x27;: None}"}, {"fullname": "pydyn_surv.item.item", "modulename": "pydyn_surv.item", "qualname": "item", "kind": "class", "doc": "<p>Class that represents an item (question) in the survey, and stores some useful data like the user answer history.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv.item.item</strong>: Instance of the class pydyn_surv.item.item</li>\n</ul>\n"}, {"fullname": "pydyn_surv.item.item.__init__", "modulename": "pydyn_surv.item", "qualname": "item.__init__", "kind": "function", "doc": "<p>Creates an instance of an pydyn_surv.item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>parameters_dict</strong> (dict, optional):\nDictionary containing the atributtes for this instance, by default pydyn_surv.item.DEFAULT_PARAMETERS_DICT</li>\n<li><strong>id_</strong> (int, optional):\nId for the item, by default None</li>\n<li><strong>origin_survey</strong> (pydyn_surv.classes.survey, optional):\nOrigin survey for the item, by default None</li>\n<li><strong>probability_function</strong> (function, optional):\nProbability function for the item, by default pydyn_surv.funcs.FUNC_LIKERT_ITEM_PROBABILITY</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv.item.item</strong>: An item instance with the initialization parameters.</li>\n</ul>\n\n<h6 id=\"usage-example\">Usage example</h6>\n\n<p>The following example shows how to create an item instance, answer it once and print the information and the training set.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">pydyn_surv.item</span> <span class=\"kn\">import</span> <span class=\"n\">item</span>\n\n<span class=\"c1\"># Define a dictionary with the item information</span>\n<span class=\"n\">item_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;question&#39;</span><span class=\"p\">:</span><span class=\"s1\">&#39;I like winter more than summer&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;answers&#39;</span><span class=\"p\">:[</span><span class=\"s1\">&#39;Totally disagree&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Disagree&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Neutral&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Agree&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;Totally agree&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;answers_values&#39;</span><span class=\"p\">:[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;category_vector&#39;</span><span class=\"p\">:[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;expert_extra&#39;</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Create an item instance using the dictionary data</span>\n<span class=\"n\">item_instance</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">(</span><span class=\"n\">item_dict</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Answer the item with a score of -1 that corresponds to &#39;Disagree&#39;</span>\n<span class=\"n\">item_instance</span><span class=\"o\">.</span><span class=\"n\">answer</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Print item information</span>\n<span class=\"n\">item_instance</span><span class=\"o\">.</span><span class=\"n\">print_info</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the training set and print it</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;The training dataset is:</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item_instance</span><span class=\"o\">.</span><span class=\"n\">get_dataset_history</span><span class=\"p\">()))</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parameters_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;question&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;answers&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;answers_values&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"s1\">&#39;category_vector&#39;</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"s1\">&#39;answer_range&#39;</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"s1\">&#39;expert_extra&#39;</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;id&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"s1\">&#39;origin_survey&#39;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">}</span>,</span><span class=\"param\">\t<span class=\"n\">id_</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">origin_survey</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">probability_function</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">FUNC_LIKERT_ITEM_PROBABILITY</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pydyn_surv.item.item.set_all_probability_function", "modulename": "pydyn_surv.item", "qualname": "item.set_all_probability_function", "kind": "function", "doc": "<p>Sets the probability function for all the items.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>func</strong> (function):\nProbability function to be setted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_instance_by_id", "modulename": "pydyn_surv.item", "qualname": "item.get_instance_by_id", "kind": "function", "doc": "<p>Returns the item instance with the given id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>id_</strong> (int):\nId of the item to be returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv.item.item</strong>: Item instance with the given id.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">id_</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.set_origin_survey", "modulename": "pydyn_surv.item", "qualname": "item.set_origin_survey", "kind": "function", "doc": "<p>Sets the origin survey for the item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>survey</strong> (pydyn_surv.classes.survey):\nThe origin survey for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">survey</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_feauture_vector", "modulename": "pydyn_surv.item", "qualname": "item.get_feauture_vector", "kind": "function", "doc": "<p>Returns the feature vector for the item, ie. the category vector.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The feauture vector.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.set_predicted_label", "modulename": "pydyn_surv.item", "qualname": "item.set_predicted_label", "kind": "function", "doc": "<p>Sets the predicted label to the input given.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>label</strong> (float):\nThe predicted label for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">label</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_predicted_label", "modulename": "pydyn_surv.item", "qualname": "item.get_predicted_label", "kind": "function", "doc": "<p>Gets the predicted label for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The predicted label for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.update_mean_label", "modulename": "pydyn_surv.item", "qualname": "item.update_mean_label", "kind": "function", "doc": "<p>Calculates the mean label for the item and assign it to the instance atribute mean_label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_mean_label", "modulename": "pydyn_surv.item", "qualname": "item.get_mean_label", "kind": "function", "doc": "<p>Gets the mean label for the item. If the update parameter is set to True, the mean label is calculated before returning it (default behaviour).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>update</strong> (bool, optional):\nIf True, the mean label is calculated before returning it, by default True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: The mean label for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">update</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.set_last_launch", "modulename": "pydyn_surv.item", "qualname": "item.set_last_launch", "kind": "function", "doc": "<p>Sets the last launch for the item.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>n_launch</strong> (int):\nThe last launch for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_launch</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.answer", "modulename": "pydyn_surv.item", "qualname": "item.answer", "kind": "function", "doc": "<p>If the answer is in the answer range, it is recorded in the answer history and the launch count is increased by one. If the answer is out of range, it is not recorded unless the force parameter is set to True.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>answer</strong> (float):\nThe answer given by the user.</li>\n<li><strong>force</strong> (bool, optional):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">answer</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_dataset_pair", "modulename": "pydyn_surv.item", "qualname": "item.get_dataset_pair", "kind": "function", "doc": "<p>Gets the dataset pair for training the model using the mean label. The dataset pair contains the pair (category vector, mean label).</p>\n\n<p>Returns:\n    tuple: (category_vector, mean_label)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_dataset_history", "modulename": "pydyn_surv.item", "qualname": "item.get_dataset_history", "kind": "function", "doc": "<p>Gets the dataset histoy for training the model. The dataset history contains the pairs (category vector, answer) from the historic answers.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The dataset history.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.probability", "modulename": "pydyn_surv.item", "qualname": "item.probability", "kind": "function", "doc": "<p>Returns the probability of the item being launched. This method is a wrapper for the _probability method, which is the one that actually calculates the probability.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.set_probability_function", "modulename": "pydyn_surv.item", "qualname": "item.set_probability_function", "kind": "function", "doc": "<p>Sets the probability function for the item. The probability function must be a callable that returns a float value. It may or may not depend on the item instance, but it must be able to handle the item instance as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability_function</strong> (callable):\nThe probability function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">probability_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_launch_count", "modulename": "pydyn_surv.item", "qualname": "item.get_launch_count", "kind": "function", "doc": "<p>Gets the launch count for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The launch count for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_answer_history", "modulename": "pydyn_surv.item", "qualname": "item.get_answer_history", "kind": "function", "doc": "<p>Gets the answer history for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The answer history for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_last_launch", "modulename": "pydyn_surv.item", "qualname": "item.get_last_launch", "kind": "function", "doc": "<p>Gets the last launch for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The last launch for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_origin_survey", "modulename": "pydyn_surv.item", "qualname": "item.get_origin_survey", "kind": "function", "doc": "<p>Gets the origin survey for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv.classes.survey</strong>: The origin survey for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.print_info", "modulename": "pydyn_surv.item", "qualname": "item.print_info", "kind": "function", "doc": "<p>Prints the instance attributes stored values into the terminal.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.item.item.get_categories_names", "modulename": "pydyn_surv.item", "qualname": "item.get_categories_names", "kind": "function", "doc": "<p>Gets the category name for the item.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The category name for the item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml", "modulename": "pydyn_surv.ml", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.ml.blc_predictor", "modulename": "pydyn_surv.ml", "qualname": "blc_predictor", "kind": "function", "doc": "<p><strong>B</strong>inary <strong>l</strong>inear <strong>c</strong>lassifier predictor. Returns the sign of a prediction given a weigth (w) and a feauture vector (x).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: sign value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.reg_predictor", "modulename": "pydyn_surv.ml", "qualname": "reg_predictor", "kind": "function", "doc": "<p><strong>Reg</strong>ression predictor. Returns the sign of a prediction given a weigth (w) and a feauture vector (x).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: sign value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.margin", "modulename": "pydyn_surv.ml", "qualname": "margin", "kind": "function", "doc": "<p>Return the <strong>margin</strong> value for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<p>Args:\n    w (np.ndarray): n-dimensional weight vector\n    x (np.ndarray): n-dimensional feauture vector\n    y (float): true prediction value for x\nReturns:\n    float: Margin value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.zero_one_loss", "modulename": "pydyn_surv.ml", "qualname": "zero_one_loss", "kind": "function", "doc": "<p>Returns the <strong>0-1 loss</strong> for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n<li><strong>y</strong> (float):\ntrue prediction value for x</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: 0-1 loss value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.hinge_loss", "modulename": "pydyn_surv.ml", "qualname": "hinge_loss", "kind": "function", "doc": "<p>Returns the <strong>hinge loss</strong> for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n<li><strong>y</strong> (float):\ntrue prediction value for x</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Hinge loss value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.hinge_loss_derivative", "modulename": "pydyn_surv.ml", "qualname": "hinge_loss_derivative", "kind": "function", "doc": "<p>Returns the <strong>derivative</strong> of the <strong>hinge loss</strong> for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n<li><strong>y</strong> (float):\ntrue prediction value for x</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Hinge loss derivative value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.squared_loss", "modulename": "pydyn_surv.ml", "qualname": "squared_loss", "kind": "function", "doc": "<p>Returns the <strong>squared loss</strong> for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n<li><strong>y</strong> (float):\ntrue prediction value for x</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Squared loss value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">predictor</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">reg_predictor</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.squared_loss_derivative", "modulename": "pydyn_surv.ml", "qualname": "squared_loss_derivative", "kind": "function", "doc": "<p>Returns the <strong>squared loss derivative</strong> for a given weight (w), feauture vector (x) and true prediction value (y).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nn-dimensional weight vector</li>\n<li><strong>x</strong> (np.ndarray):\nn-dimensional feauture vector</li>\n<li><strong>y</strong> (float):\ntrue prediction value for x</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Squared loss derivative value</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">predictor</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">reg_predictor</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.gradient_descent", "modulename": "pydyn_surv.ml", "qualname": "gradient_descent", "kind": "function", "doc": "<p>Execute the classic <strong>gradient descent</strong> for all the loss functions for a given training dataset and returns a trained weight.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loss</strong> (function):\nLoss function.</li>\n<li><strong>dd_loss</strong> (function):\nLoss derivative function</li>\n<li><strong>training_dataset</strong> (Iterable):\nA list containing the (weight,label) pair for training.</li>\n<li><strong>eta</strong> (float, optional):\nThe step size, by default 0.01</li>\n<li><strong>iterations</strong> (int, optional):\nThe number of iterations, by default 500</li>\n<li><strong>verbose</strong> (bool, optional):\nTrue for verbose, by default True</li>\n<li><strong>w</strong> (np.ndarray, optional):\nA starting width np.ndarray, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Trained width</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loss</span>,</span><span class=\"param\">\t<span class=\"n\">dd_loss</span>,</span><span class=\"param\">\t<span class=\"n\">training_dataset</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>,</span><span class=\"param\">\t<span class=\"n\">eta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.ml.stocastic_gradient_descent", "modulename": "pydyn_surv.ml", "qualname": "stocastic_gradient_descent", "kind": "function", "doc": "<p>Execute the <strong>stocastic gradient descent</strong> for all the loss functions for a given training dataset and returns a trained weight.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>loss</strong> (function):\nLoss function.</li>\n<li><strong>dd_loss</strong> (function):\nLoss derivative function</li>\n<li><strong>training_dataset</strong> (Iterable):\nA list containing the (weight,label) pair for training.</li>\n<li><strong>eta</strong> (float, optional):\nThe step size, by default 0.01</li>\n<li><strong>iterations</strong> (int, optional):\nThe number of iterations, by default 500</li>\n<li><strong>verbose</strong> (bool, optional):\nTrue for verbose, by default True</li>\n<li><strong>w</strong> (np.ndarray, optional):\nA starting width np.ndarray, by default None</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Trained width</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">loss</span>,</span><span class=\"param\">\t<span class=\"n\">dd_loss</span>,</span><span class=\"param\">\t<span class=\"n\">training_dataset</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Iterable</span>,</span><span class=\"param\">\t<span class=\"n\">init_eta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">500</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.other_classes", "modulename": "pydyn_surv.other_classes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list", "kind": "class", "doc": "<p>Built-in mutable sequence.</p>\n\n<p>If no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified.</p>\n", "bases": "builtins.list"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.__init__", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.__init__", "kind": "function", "doc": "<p>A list of pydyn_surv objects with some useful methods.</p>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li><p><strong>probabilities:</strong>\nReturns a list of probabilities of each item in the list.</p></li>\n<li><p><strong>ids:</strong>\nReturns a list of ids of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p></li>\n<li><p><strong>questions:</strong>\nReturns a list of questions of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p></li>\n<li><p><strong>names:</strong>\nReturns a list of names of each item in the list (only works if the list is made of pydyn_surv.survey.survey objects).</p></li>\n<li><p><strong>answer_history:</strong>\nReturns a list of answer_history of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv_list</strong> (pydyn_surv.other_classes.pydyn_surv_list):\nA pydyn_surv_list object.</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span>)</span>"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.probabilities", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.probabilities", "kind": "function", "doc": "<p>Returns a list of probabilities of each item in the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>all_zero_to_one</strong> (bool):\nIf True, all probabilities are set to 1 if all of them are 0.</li>\n<li><strong>nan_to_zero</strong> (bool):\nIf True, all probabilities that are np.nan are set to 0.</li>\n<li><strong><em>args, *</em>kargs:</strong>: Arguments and keyword arguments to be passed to the probability method of each item.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>probs</strong> (list):\nA list of probabilities of each item in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">all_zero_to_one</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">nan_to_zero</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.ids", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.ids", "kind": "function", "doc": "<p>Returns a list of ids of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ids</strong> (list):\nA list of ids of each item in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.questions", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.questions", "kind": "function", "doc": "<p>Returns a list of questions of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>questions</strong> (list):\nA list of questions of each item in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.names", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.names", "kind": "function", "doc": "<p>Returns a list of names of each item in the list (only works if the list is made of pydyn_surv.survey.survey objects).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>names</strong> (list):\nA list of names of each item in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.other_classes.pydyn_surv_list.answer_history", "modulename": "pydyn_surv.other_classes", "qualname": "pydyn_surv_list.answer_history", "kind": "function", "doc": "<p>Returns a list of answer_history of each item in the list (only works if the list is made of pydyn_surv.item.item objects).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>answer_history</strong> (list):\nA list of answer_history of each item in the list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey", "modulename": "pydyn_surv.survey", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.survey.LAUNCH_FORMAT", "modulename": "pydyn_surv.survey", "qualname": "LAUNCH_FORMAT", "kind": "variable", "doc": "<p>List containing the strings with the format to display an intem in the terminal. The first string is the format for the item's statement, the second is the format for the item's answer number and the third is the format for the closing.</p>\n", "default_value": "[&#x27;-----------------------------------------------------------\\n {}&#x27;, &#x27;    {}) {}&#x27;, &#x27;-----------------------------------------------------------&#x27;]"}, {"fullname": "pydyn_surv.survey.survey", "modulename": "pydyn_surv.survey", "qualname": "survey", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "pydyn_surv.survey.survey.__init__", "modulename": "pydyn_surv.survey", "qualname": "survey.__init__", "kind": "function", "doc": "<p>Creates a survey instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (list, optional):\nThe list of items that the survey will contain, by default []. The items can be added later with the methods <code>set_items</code> and <code>add_item</code>. The items could be pydyn_surv.item.item instances or dicts with the parameters to create them.</li>\n<li><strong>name</strong> (str, optional):\nThe name of the survey, by default ''. It is also used to set the origin category name in case it is not set with the parameter <code>origin_category</code>.</li>\n<li><strong>init_training_dataset</strong> (list, optional):\nThe initial trainin dataset in case, by default None.</li>\n<li><strong>w</strong> (np.ndarray, optional):\nThe initial weight vector, by default None. If it is not set, it will be set to a vector of zeros with the same dimension as the items.</li>\n<li><strong>predictor</strong> (callable, optional):\nThe predictor function, by default <code>pydyn_surv.funcs.PREDICTOR</code>. It can be changed later with the method <code>set_predictor</code>.</li>\n<li><strong>launch_format</strong> (list, optional):\nThe format to display the items in the terminal, by default <code>pydyn_surv.survey.LAUNCH_FORMAT</code>.</li>\n<li><strong>categories</strong> (list, optional):\nThe list of categories that the survey will contain, by default []. The categories can be added later with the methods <code>set_categories</code> and <code>add_category</code>.</li>\n<li><strong>origin</strong> (list, optional):\nThe list of surveys that are the origin of the survey, by default []. The origin can be changed later with the method <code>set_origin</code>.</li>\n<li><strong>offspring</strong> (list, optional):\nThe list of surveys that are the offspring of the survey, by default []. The offspring can be changed later with the method <code>set_offspring</code>.</li>\n<li><strong>origin_category</strong> (str, optional):\nThe name of the origin category, by default None. If it is not set, it will be set to the name of the survey.</li>\n<li><strong>condition_function</strong> (callable, optional):\nThe condition function, by default <code>pydyn_surv.funcs.FUNC_TRUE</code>. It can be changed later with the method <code>set_condition_function</code>.</li>\n<li><strong>probability_function</strong> (callable, optional):\nThe probability function, by default <code>pydyn_surv.funcs.FUNC_TRUE</code>. It can be changed later with the method <code>set_probability_function</code>.</li>\n<li><strong>train_function</strong> (callable, optional):\nThe train function, by default <code>pydyn_surv.funcs.TRAIN_FUNCTION</code>. It can be changed later with the method <code>set_train_function</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pydyn_surv.survey.survey</strong>: The survey instance.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">init_training_dataset</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictor</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">reg_predictor</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">launch_format</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;-----------------------------------------------------------</span><span class=\"se\">\\n</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;    </span><span class=\"si\">{}</span><span class=\"s1\">) </span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-----------------------------------------------------------&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">categories</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">offspring</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">origin_category</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">condition_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">FUNC_TRUE</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">probability_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">FUNC_TRUE</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">train_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">TRAIN_FUNCTION</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "pydyn_surv.survey.survey.get_total_launches", "modulename": "pydyn_surv.survey", "qualname": "survey.get_total_launches", "kind": "function", "doc": "<p>Returns the total amount of launches across all surveys.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The total amount of launches across all surveys.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_origin", "modulename": "pydyn_surv.survey", "qualname": "survey.set_origin", "kind": "function", "doc": "<p>Sets the origin for the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>origin</strong> (list):\nA list containing the origin surveys, which must be of type survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_offspring", "modulename": "pydyn_surv.survey", "qualname": "survey.set_offspring", "kind": "function", "doc": "<p>Sets the offspring for the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>offspring</strong> (list):\nA list containing the offspring surveys, which must be of type survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.add_origin", "modulename": "pydyn_surv.survey", "qualname": "survey.add_origin", "kind": "function", "doc": "<p>Adds an origin survey to the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>origin</strong> (pydyn_surv.survey.survey):\nThe origin survey to be added.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.add_offspring", "modulename": "pydyn_surv.survey", "qualname": "survey.add_offspring", "kind": "function", "doc": "<p>Adds an offspring survey to the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>offspring</strong> (pydyn_surv.survey.survey):\nThe offspring survey to be added.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_origin_category", "modulename": "pydyn_surv.survey", "qualname": "survey.set_origin_category", "kind": "function", "doc": "<p>Sets the origin category for the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>category</strong> (list|str):\nThe origin category for the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_items", "modulename": "pydyn_surv.survey", "qualname": "survey.set_items", "kind": "function", "doc": "<p>Sets the items for the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>items</strong> (list):\nA list containing the items, which can be of type item or dict.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.add_item", "modulename": "pydyn_surv.survey", "qualname": "survey.add_item", "kind": "function", "doc": "<p>Adds an item to the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_</strong> (item):\nThe item to be added.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item_</span><span class=\"p\">:</span> <span class=\"n\">pydyn_surv</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">item</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.reset_category_history", "modulename": "pydyn_surv.survey", "qualname": "survey.reset_category_history", "kind": "function", "doc": "<p>Resets the history of answers for all the categories.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_categories", "modulename": "pydyn_surv.survey", "qualname": "survey.set_categories", "kind": "function", "doc": "<p>Sets the names of all the categories that can be selected.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>categories</strong> (list):\nA list containing the categories.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">categories</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.add_category", "modulename": "pydyn_surv.survey", "qualname": "survey.add_category", "kind": "function", "doc": "<p>Adds a category to the list of categories.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>category</strong> (str):\nThe name of the category.</li>\n<li><strong>init_count</strong> (int, optional):\nThe amount of times a question within this category has been answered, by default 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">init_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_training_dataset", "modulename": "pydyn_surv.survey", "qualname": "survey.get_training_dataset", "kind": "function", "doc": "<p>Returns the training dataset of the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>training_dataset</strong> (list):\nA list containing the training dataset. Each element is a tuple containing the feature vector and the label.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_weight", "modulename": "pydyn_surv.survey", "qualname": "survey.get_weight", "kind": "function", "doc": "<p>Returns the current weight vector of the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nThe current weight vector of the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.update_training_dataset", "modulename": "pydyn_surv.survey", "qualname": "survey.update_training_dataset", "kind": "function", "doc": "<p>Updates the training dataset of the survey.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_feature_vectors", "modulename": "pydyn_surv.survey", "qualname": "survey.get_feature_vectors", "kind": "function", "doc": "<p>Returns the feature vectors of the items in the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>feature_vectors</strong> (list):\nA list containing the feature vectors of the items in the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_predicted_labels", "modulename": "pydyn_surv.survey", "qualname": "survey.get_predicted_labels", "kind": "function", "doc": "<p>Returns the predicted labels of the items in the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nThe weight vector.</li>\n<li><strong>predictor</strong> (function):\nThe predictor function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>predicted_labels</strong> (list):\nA list containing the predicted labels of the items in the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">predictor</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_calculated_labels", "modulename": "pydyn_surv.survey", "qualname": "survey.get_calculated_labels", "kind": "function", "doc": "<p>Returns the calculated labels of the items in the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>calculated_labels</strong> (list):\nA list containing the calculated labels of the items in the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.update_predicted_labels", "modulename": "pydyn_surv.survey", "qualname": "survey.update_predicted_labels", "kind": "function", "doc": "<p>Updates the predicted labels of the items in the survey via <code>get_predicted_labels</code> method with the survey's weight vector and predictor function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.update_calculated_labels", "modulename": "pydyn_surv.survey", "qualname": "survey.update_calculated_labels", "kind": "function", "doc": "<p>Updates the calculated labels of the items in the survey via <code>get_calculated_labels</code> method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.update_all_labels", "modulename": "pydyn_surv.survey", "qualname": "survey.update_all_labels", "kind": "function", "doc": "<p>Updates the predicted and calculated labels of the items in the survey.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_w", "modulename": "pydyn_surv.survey", "qualname": "survey.set_w", "kind": "function", "doc": "<p>Sets the weight vector of the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>w</strong> (np.ndarray):\nThe weight vector.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">w</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_predictor", "modulename": "pydyn_surv.survey", "qualname": "survey.set_predictor", "kind": "function", "doc": "<p>Sets the predictor function of the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>predictor</strong> (function):\nThe predictor function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">predictor</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.print_items", "modulename": "pydyn_surv.survey", "qualname": "survey.print_items", "kind": "function", "doc": "<p>Prints the items in the survey.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.print_item_info", "modulename": "pydyn_surv.survey", "qualname": "survey.print_item_info", "kind": "function", "doc": "<p>Prints the information of an item in the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_</strong> (item):\nThe item to print the information of.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item_</span><span class=\"p\">:</span> <span class=\"n\">pydyn_surv</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">item</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.launch_random", "modulename": "pydyn_surv.survey", "qualname": "survey.launch_random", "kind": "function", "doc": "<p>Returns a random item in the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>random_func</strong> (callable, optional):\nThe function to use to randomly select an item, by default <code>random.choices.rnd_choices</code>.</li>\n<li><strong>all_zero_to_one</strong> (bool, optional):\nIf <code>True</code>, if the probabilities of all the items are equal to zero, it turns them to one, by default False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>item_</strong> (pydyn_surv.item.item):\nThe randomly selected item.</li>\n<li><strong>item_.question_text</strong> (str):\nThe question text of the randomly selected item.</li>\n<li><strong>item_.answers_text</strong> (list):\nThe answers text of the randomly selected item.</li>\n<li><strong>item_.answers_values</strong> (list):\nThe answers values of the randomly selected item.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">random_func</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">bound</span> <span class=\"n\">method</span> <span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">choices</span> <span class=\"n\">of</span> <span class=\"o\">&lt;</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">Random</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x184c040</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">all_zero_to_one</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.launch_on_terminal", "modulename": "pydyn_surv.survey", "qualname": "survey.launch_on_terminal", "kind": "function", "doc": "<p>Launches an item on the terminal.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>item_</strong> (item):\nThe item to launch.</li>\n<li><strong>force_answer</strong> (bool, optional):\nIf <code>True</code>, it forces the answering without checking the input, by default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item_</span><span class=\"p\">:</span> <span class=\"n\">pydyn_surv</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">item</span>, </span><span class=\"param\"><span class=\"n\">force_answer</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_launch_count", "modulename": "pydyn_surv.survey", "qualname": "survey.get_launch_count", "kind": "function", "doc": "<p>Gets the launch count of the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The launch count for the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_category_launch_count", "modulename": "pydyn_surv.survey", "qualname": "survey.get_category_launch_count", "kind": "function", "doc": "<p>Gets the launch count of each category.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: The launch count for each category.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_category_answer_history", "modulename": "pydyn_surv.survey", "qualname": "survey.get_category_answer_history", "kind": "function", "doc": "<p>Gets the answer history of each category.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: The answer history for each category.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.print_info", "modulename": "pydyn_surv.survey", "qualname": "survey.print_info", "kind": "function", "doc": "<p>Prints the information of the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>print_items</strong> (bool, optional):\nIf <code>True</code>, it prints the items in the survey, by default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">print_items</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.update_all", "modulename": "pydyn_surv.survey", "qualname": "survey.update_all", "kind": "function", "doc": "<p>Updates all the information of the survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>exclude_calculated_labels</strong> (bool, optional):\nIf <code>True</code>, it excludes the calculated labels from the update, by default False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude_calculated_labels</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_self_label", "modulename": "pydyn_surv.survey", "qualname": "survey.get_self_label", "kind": "function", "doc": "<p>Gets the predicted label of a survey based on the origin category and the origin.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>label</strong> (float):\nThe label of the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.condition", "modulename": "pydyn_surv.survey", "qualname": "survey.condition", "kind": "function", "doc": "<p>Returns True if the condition for launching the survey is met, False otherwise. This method is a wrapper for the _condition method, which is setted by the set_condition_function method. It also stores the last condition state in the last_condition_state attribute.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*args</strong> (list):\nThe arguments for the condition function.</li>\n<li><strong>**kwargs</strong> (dict):\nThe keyword arguments for the condition function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>condition</strong> (bool):\nTrue if the condition for launching the survey is met, False otherwise.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_condition_function", "modulename": "pydyn_surv.survey", "qualname": "survey.set_condition_function", "kind": "function", "doc": "<p>Sets the condition function for the survey. The condition function must be a callable that returns a boolean value. It may or may not depend on the survey instance, but it must be able to handle the survey instance as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>condition_function</strong> (callable):\nThe condition function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">condition_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.probability", "modulename": "pydyn_surv.survey", "qualname": "survey.probability", "kind": "function", "doc": "<p>Returns the probability of the survey being launched. This method is a wrapper for the _probability method, which is the one that actually calculates the probability.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*args</strong> (list):\nThe arguments for the probability function.</li>\n<li><strong>**kwargs</strong> (dict):\nThe keyword arguments for the probability function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_probability_function", "modulename": "pydyn_surv.survey", "qualname": "survey.set_probability_function", "kind": "function", "doc": "<p>Sets the probability function for the survey. The probability function must be a callable that returns a float value. It may or may not depend on the survey instance, but it must be able to handle the survey instance as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability_function</strong> (callable):\nThe probability function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">probability_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_probability_function_of_items", "modulename": "pydyn_surv.survey", "qualname": "survey.set_probability_function_of_items", "kind": "function", "doc": "<p>Sets the probability function for the items of the survey. The probability function must be a callable that returns a float value. It may or may not depend on the survey instance, but it must be able to handle the survey instance as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>probability_function</strong> (callable):\nThe probability function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">probability_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.train", "modulename": "pydyn_surv.survey", "qualname": "survey.train", "kind": "function", "doc": "<p>Trains the survey. This method is a wrapper for the _train method, which is the one that actually trains the survey.`</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>*args</strong> (list):\nThe arguments for the train function.</li>\n<li><strong>**kwargs</strong> (dict):\nThe keyword arguments for the train function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.set_train_function", "modulename": "pydyn_surv.survey", "qualname": "survey.set_train_function", "kind": "function", "doc": "<p>Sets the train function for the survey. The train function must be a callable that returns a width. It must be able to handle the survey instance as an argument.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>train_function</strong> (callable):\nThe train function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_function</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">callable</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_surveys", "modulename": "pydyn_surv.survey", "qualname": "survey.get_surveys", "kind": "function", "doc": "<p>Returns a list with the surveys avaiable to be launched from the current survey, e.i. the current survey and the offspring surveys that meet the condition for launching. If the force argument is set to True, it returns the offspring surveys that meet the condition even if the condition is not met for the current survey.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>force</strong> (bool, optional):\nIf <code>True</code>, it returns the offspring surveys that meet the condition even if the condition is not met for the current survey, by default False.</li>\n<li><strong>force_offspring</strong> (bool, optional):\nRepresents the force state for the offspring surveys, since this is a recursive method, by default False.</li>\n<li><strong>*args</strong> (list):\nThe arguments for the condition function.</li>\n<li><strong>**kwargs</strong> (dict):\nThe keyword arguments for the condition function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>surveys</strong> (pydyn_surv_list):\nThe list of surveys avaiable to be launched from the current survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">force_offspring</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pydyn_surv</span><span class=\"o\">.</span><span class=\"n\">other_classes</span><span class=\"o\">.</span><span class=\"n\">pydyn_surv_list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_items", "modulename": "pydyn_surv.survey", "qualname": "survey.get_items", "kind": "function", "doc": "<p>Returns a list with the items of the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>items</strong> (pydyn_surv_list):\nThe list of items of the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pydyn_surv</span><span class=\"o\">.</span><span class=\"n\">other_classes</span><span class=\"o\">.</span><span class=\"n\">pydyn_surv_list</span>:</span></span>", "funcdef": "def"}, {"fullname": "pydyn_surv.survey.survey.get_weight_history", "modulename": "pydyn_surv.survey", "qualname": "survey.get_weight_history", "kind": "function", "doc": "<p>Returns a list with the weight history of the survey.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>w_history</strong> (list):\nThe list of weight history of the survey.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();